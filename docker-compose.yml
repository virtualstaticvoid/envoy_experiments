---
version: '3'

services:

  #
  # entry point to "public" services or APIs
  #

  gateway:
    build:
      context: sidecar
    volumes:
      - "./envoy.yaml:/etc/envoy.yaml"
    networks:
      - envoymesh
    ports:
      - "8000:9080"  # gateway
      - "8001:9090"  # envoy admin
    links:
      - http_service
      - redis_service
      - postgres_service
      - rabbitmq_service

  #
  # base services ~ not exposed via front envoy, but via sidecar proxy
  # i.e. these services are consumed by the application services
  #

  redis:
    build:
      context: redis
    volumes:
      - "redis_data:/data"
    networks:
      - envoymesh
    ports:
      - "8010:6379"
    env_file:
      - "./.env"

  postgres:
    build:
      context: postgres
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
      - "./postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql"
    networks:
      - envoymesh
    ports:
      - "8020:5432"
    env_file:
      - "./.env"

  rabbitmq:
    build:
      context: rabbitmq
    volumes:
      - "rabbitmq_data:/var/lib/rabbitmq"
    networks:
      - envoymesh
    ports:
      - "8030:5672"
      - "8031:15672"  # rabbimq admin
    env_file:
      - "./.env"

  #
  # example services
  #

  # HTTP service (backed by httpbin)

  http_service:
    build:
      context: http_service
    networks:
      - envoymesh
    ports:
      - "8050:9080"  # service via envoy
      - "8051:9090"  # envoy admin
      - "8052:8080"  # direct connection for debugging
    volumes:
      - "./http_service:/usr/service" # for debugging (reduce need to rebuild image)
    env_file:
      - "./.env"

  # Service using redis

  redis_service:
    build:
      context: redis_service
    networks:
      - envoymesh
    ports:
      - "8060:9080"  # service via envoy
      - "8061:9090"  # envoy admin
      - "8062:8080"  # direct connection for debugging
    volumes:
      - "./redis_service:/usr/service" # for debugging (reduce need to rebuild image)
    env_file:
      - "./.env"

  # Service using Postgres

  postgres_service:
    build:
      context: postgres_service
    networks:
      - envoymesh
    ports:
      - "8070:9080"  # service via envoy
      - "8071:9090"  # envoy admin
      - "8072:8080"  # direct connection for debugging
    volumes:
      - "./postgres_service:/usr/service" # for debugging (reduce need to rebuild image)
    env_file:
      - "./.env"

  # Service using rabbitmq

  rabbitmq_service:
    build:
      context: rabbitmq_service
      dockerfile: Dockerfile.server
    networks:
      - envoymesh
    ports:
      - "8080:9080"  # service via envoy
      - "8081:9090"  # envoy admin
      - "8082:8080"  # direct connection for debugging
    volumes:
      - "./rabbitmq_service:/usr/service" # for debugging (reduce need to rebuild image)
    env_file:
      - "./.env"

  rabbitmq_worker:
    build:
      context: rabbitmq_service
      dockerfile: Dockerfile.worker
    networks:
      - envoymesh
    ports:
      - "8091:9090"  # envoy admin
    volumes:
      - "./rabbitmq_service:/usr/service" # for debugging (reduce need to rebuild image)
    env_file:
      - "./.env"

networks:
  envoymesh: {}

volumes:
  redis_data: {}
  postgres_data: {}
  rabbitmq_data: {}
